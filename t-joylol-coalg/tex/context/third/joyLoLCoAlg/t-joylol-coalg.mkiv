% A ConTeXt MkIV module
%D \module
%D   [     file=t-joylol-coalg,
%D      version=2017.04.05,
%D        title=\CONTEXT\ User module,
%D     subtitle=JoyLoL CoAlgebra definitions,
%D       author=Stephen Gaito,
%D         date=\currentdate,
%D    copyright=PerceptiSys Ltd (Stephen Gaito),
%D        email=stephen@perceptisys.co.uk,
%D      license=MIT License]

%C Copyright (C) 2017 PerceptiSys Ltd (Stephen Gaito)
%C
%C Permission is hereby granted, free of charge, to any person obtaining a 
%C copy of this software and associated documentation files (the 
%C "Software"), to deal in the Software without restriction, including 
%C without limitation the rights to use, copy, modify, merge, publish, 
%C distribute, sublicense, and/or sell copies of the Software, and to 
%C permit persons to whom the Software is furnished to do so, subject to 
%C the following conditions: 
%C
%C The above copyright notice and this permission notice shall be included 
%C in all copies or substantial portions of the Software. 
%C
%C THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
%C OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
%C MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
%C IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
%C CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
%C TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
%C SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 

% begin info
%
% title   : JoyLoL CoAlgebra definitions
% comment : Provides structured document and code generation
% status  : under development, mkiv only
%
% end info

%M \usemodule[joylol-coalg]
%M \loadsetups[t-joylol-coalg.xml]

%M \setupinteraction
%M   [state=start,
%M    color=green,
%M    style=bold]
%M % make chapter, section bookmarks visible when opening document
%M \placebookmarks[chapter,section,subsection][chapter,section]
%M \setupinteractionscreen[option=bookmark]

%D \section{Introduction}

%D The JoyLoL CoAlgebra \ConTeXt\ module provides the tools required to 
%D fully describe the formal semantics of a particular JoyLoL CoAlgebraic 
%D extension including any defined JoyLoL words. It consists of literate 
%D documentation of the acutal source code produced to implement the 
%D JoyLoL CoAlgebraic extension. 

%D \subsection{Implementation}

%D In this section we define load the Syntax Highlighter modules used by 
%D the code display commands (below). We also load the ConTests module 
%D used to test the JoyLoL CoAlgebra module itself. We then load the lua 
%D code associated with the \type{t-joylol-coalg} module. Finally we 
%D define the \ConTeXt\ \type{joyLoLCoAlg} namespace, in particular, this 
%D registers a namespace to be used exclusively by the lua code to store 
%D the CoAlgebras as they are defined. 

\writestatus{loading}{ConTeXt User Module / JoyLoL CoAlgebra Extensions}

\usemodule[t-high-cpp]
%\usemodule[t-high-lisp]
\usemodule[t-contests]

\unprotect

\ctxloadluafile{t-joylol-coalg}

\installnamespace{joyLoLCoAlg}

\installcommandhandler \????joyLoLCoAlg {joyLoLCoAlg} \????joyLoLCoAlg

%D \section{JoyLoLCoAlg environment}

%D The JoyLoLCoAlg environment provides a highly structured environment in 
%D which to describe the formal semantics and implementation of a 
%D particular JoyLoL CoAlgebraic extension.

%D A typical JoyLoLCoAlg environment consists of a collection of JoyLoL 
%D words. This includes a \quote{global} word which defines any global 
%D code required by the CoAlgegraic extension as a whole. 

%D \subsection{Examples}

%D \starttyping
%D \startJoyLoLCoAlg[title=List of Lists][lists]
%D \stoptyping

%D The first argument provides the arguments to an embedded 
%D \type{\startchapter} command. 

%D The second argument provides the arguments to an embedded 
%D \type{\startcomponent} command. It also provides the base file name of 
%D all of the automatically generated code fragments. 

%D The second argument also determines the name of any JoyLoL, ANSI-C, or 
%D Lua source file artefacts produced by this literate code documentation. 

%D \subsection{Implementation: Start}

\def\startJoyLoLCoAlg[#1][#2]{
  \startcomponent[#2]
  \startchapter[#1]
  \directlua{thirddata.joyLoLCoAlgs.newCoAlg('#2')}
}

%D \subsubsection{Implementation: Start: Tests}

%D \startConTestSuite
%D   \mock\startcomponent[#1]{\relax}
%D   \mock\startchapter[#1]{\relax}
%D   \startJoyLoLCoAlg[title=List of Lists][lists]
%D   \startConTestLua
%D     local theCoAlg = thirddata.joyLoLCoAlgs.theCoAlg
%D     assert.isTable(theCoAlg)
%D     assert.hasKey(theCoAlg, 'lists')
%D     assert.isTable(theCoAlg['lists'])
%D     local lists = theCoAlg.lists
%D     assert.hasKey(lists, 'name')
%D     assert.matches(lists.name, 'lists')
%D     assert.hasKey(lists, 'words')
%D     local words = lists.words
%D     assert.hasKey(words, 'global')
%D   \stopConTestLua
%D \stopConTestSuite

%D \subsection{Implementation: Stop}

\def\stopJoyLoLCoAlg{
  \directlua{thirddata.joyLoLCoAlgs.createCoAlg()}
  \stopchapter
  \stopcomponent
}

%D \section{Source licenses}

%D \subsection{Examples}

%D \subsection{Implementation}

\unexpanded\def\srcCopyrightCCBYSA{}

% <a rel="license" 
% href="http://creativecommons.org/licenses/by-sa/4.0/"><img alt="Creative 
% Commons License" style="border-width:0" 
% src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" /></a><br 
% /><span xmlns:dct="http://purl.org/dc/terms/" 
% property="dct:title">JoyLoL</span> by <a 
% xmlns:cc="http://creativecommons.org/ns#" 
% href="https://www.perceptisys.co.uk" property="cc:attributionName" 
% rel="cc:attributionURL">Perceptisys Ltd (Stephen Gaito)</a> is licensed 
% under a <a rel="license" 
% href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons 
% Attribution-ShareAlike 4.0 International License</a>.<br />Based on a 
% work at <a xmlns:dct="http://purl.org/dc/terms/" href="gitHub" 
% rel="dct:source">gitHub</a>. 

%D \section{Target licenses}

%D \subsection{Examples}

%D \subsection{Implementation}

\unexpanded\def\targetCopyrightMIT{}

%D \section{Describing CoAlgebraic dependencies}

%D \subsection{Examples}

%D \subsection{Implementation}

\def\dependsOn[#1]{
  \directlua{thirddata.joyLoLCoAlgs.addDependency('#1')}
}

%D \section{Code display}

%D \subsection{Implementation}

\definetextbackground[JFrame]
\setuptextbackground[JFrame][location=text, background=color, backgroundcolor=gray]

%D \section{JoyLoL word environment}

%D A JoyLoL word contains one or more sections of code, either JoyLoL, 
%D ANSI-C or Lua, together with a collection of descriptors of the JoyLoL 
%D \{pre, post\} \{data, process\} stacks. 

%D \subsection{Examples}

%D \subsection{Implementation: start}

\def\startJoyLoLWord[#1]{
  \directlua{thirddata.joyLoLCoAlgs.newWord('#1')}
}

%D \subsection{Implementation: stop}

\def\stopJoyLoLWord{
  \directlua{thirddata.joyLoLCoAlgs.endWord()}
}

%D \section{Describing the data stack}

%D \subsection{Examples}

%D \subsection{Implementation}

\def\preDataStack[#1][#2]{
  \directlua{thirddata.joyLoLCoAlgs.addPreDataStackDescription('#1', '#2')}
}

\def\postDataStack[#1]{
  \directlua{thirddata.joyLoLCoAlgs.addPostDataStackDescription('#1')}
}

%D \section{Describing the process stack}

%D \subsection{Examples}

%D \subsection{Implementation}

\def\preProcessStack[#1][#2]{
  \directlua{thirddata.joyLoLCoAlgs.addPreProcessStackDescription('#1', '#2')}
}

\def\postProcessStack[#1]{
  \directlua{thirddata.joyLoLCoAlgs.addPostProcessStackDescription('#1')}
}

%D \section{JoyLoL code environment}

%D \subsection{Examples}

%D \subsection{Implementation: start}

\definetyping[JoyLoLCode]
%\setuptyping[JoyLoLCode][option=lisp]

%D \subsection{Implementation: stop}

\let\oldStopJoyLoLCode=\stopJoyLoLCode
\def\stopJoyLoLCode{%
  \oldStopJoyLoLCode%
  \directlua{thirddata.joyLoLCoAlgs.addJoyLoLCode('_typing_')}
}

%D \section{C header environment}

%D \subsection{Examples}

%D \subsection{Implementation: start}

\definetyping[CHeader]
\setuptyping
  [CHeader]
  [ option=cpp, numbering=line,
    before={\noindent\startJFrame}, after=\stopJFrame
  ]
%\setuptyping[CHeader][option=cpp]

%D \subsection{Implementation: stop}

\let\oldStopCHeader=\stopCHeader
\def\stopCHeader{%
  \oldStopCHeader%
  \directlua{thirddata.joyLoLCoAlgs.addCHeader('_typing_')}
}

%D \section{C code environment}

%D \subsection{Examples}

%D \subsection{Implementation: start}

\definetyping[CCode]
\setuptyping[CCode][option=cpp]

%D \subsection{Implementation: stop}

\let\oldStopCCode=\stopCCode
\def\stopCCode{%
  \oldStopCCode%
  \directlua{thirddata.joyLoLCoAlgs.addCCode('_typing_')}}
  
%D \section{Lua code environment}

%D \subsection{Examples}

%D \subsection{Implementation: start}

\definetyping[LuaCode]
\setuptyping[LuaCode][option=lua]

%D \subsection{Implementation: stop}

\let\oldStopLuaCode=\stopLuaCode
\def\stopLuaCode{%
  \oldStopLuaCode%
  \directlua{thirddata.joyLoLCoAlgs.addLuaCode('_typing_')}}

\protect \endinput


